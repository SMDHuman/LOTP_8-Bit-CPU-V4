0: NOP
1: LDA [DATA]        	- Load next value of program Memory to A register
2: LAP [ADDRESS]     	- Take next value as pointer and load data from program Memory to A register
3: STA [ADDRESS]     	- Take next value as pointer and Store data from A register to program Memory
4: LDB [DATA]        	- Load next value of program Memory to B register
5: CAL [CALCULATION]	- Make a calculation between A and B register 
6: ATA 					- Store ALU's calculation to A Register
7: JMP [ADDRESS]		- Jump immediate
8: JOF [ADDRESS]		- Jump if overflow
9: JEZ [ADDRESS]		- Jump if equal zero 
A: PSH					- Push data from A register to FILO stack
B: POP					- Pop data from FILO stack and write A register
C: INP					- Read data from input and write A register
D: OUT					- Read data from A register and write output
E: 
F: HLT					- Stops clock ticking


                       bus
      +------------+ 8 ||| 8 +----------------+
      |instruction |<=>|||<=>|   A register   |
      |register    |   |||   +----------------+       
      +------------+   ||| 4 +-----------+  ||
              ||8      |||==>|calculation|  ||
              \/       |||   | register  |  ||8
       <-+---------+   |||   +-----------+  ||
       <-|microcode|   |||         ||4      ||
       <-|Memory   |   |||         \/       \/
       <-+---------+   ||| 8 +----------------+
              /\       |||<==|       ALU      |
              ||4      |||   +----------------+
+-----+  +---------+ 8 |||        /\     
|clock|--|12address|<=>|||        ||8    
+-----+  | counter |   ||| 8 +----------+          
         +---------+   |||==>|B register|         
          +--------+ 8 |||   +----------+         
          |address |<==||| 8 +--------+ 8+-------+                    
          |register|   |||<=>| stack  |<=| stack |                         
          +--------+   |||   | Memory |  |counter|
              ||8      |||   +--------+  +-------+
              \/       ||| 8 +---------------+       
          +--------+ 8 |||<==|input register |<== = =
          |program |==>|||   +---------------+<-- - -   
          | Memory |   ||| 8 +---------------+      
          +--------+   |||==>|output register|== = >   
                       |||   +---------------+-- - >   


Microcode Page Flags:
	ALU:
		-Overflow
		-Output Zero

Microcode Flags:
	Reads:
		0: - - -
		1: Address Counter
		2: Program Memory
		3: Instruction Register
		4: A Register
		5: Input Register
		6: Stack Memory
		7: ALU
		8: - - -
		9: - - -
		A: - - -
		B: - - -
		C: - - -
		D: - - -
		E: - - -
		F: - - -
	Writes:
		0: - - -
		1: Address Counter
		2: Address Register
		3: Program Memory
		4: Instruction Register
		5: A Register
		6: B Register
		7: Calculation Register
		8: Output Register
		9: Stack Memory
		A: - - -
		B: - - -
		C: - - -
		D: - - -
		E: - - -
		F: - - -
	Clock : 
		-Halt 
	Address Counter: 
		-Count up
	Stack Counter:
		-Count Up
		-Count Down
	12 Bit Address Counter:
		-Reset Microcode


Calculations:
	 `1b
	0000 : A
	0001 : A + B
	0010 : A + 1
	0011 : A + B + 1
	0100 : `(A)
	0101 : `(A + B)
	0110 : `(A + 1)
	0111 : `(A + B + 1)
	 `ss
	1000 : A | B
	1001 : A & B
	1010 : A ^ B
	1011 : A >> 1
	1100 : `(A | B)
	1101 : `(A & B)
	1110 : `(A ^ B)
	1111 : `(A >> 1)
